+++ src/app/virtualbox/src/VBox/Frontends/VBoxBFE/VBoxBFE.cpp
@@ -1809,6 +1809,35 @@
     rc = CFGMR3InsertInteger(pCfg,  "Object",        (uintptr_t)gVMMDev);           UPDATE_RC();
 
     /*
+     * USB
+     */
+#if defined(VBOX_WITH_USB)
+    rc = CFGMR3InsertNode(pDevices, "usb-ohci",      &pDev);                        UPDATE_RC();
+    rc = CFGMR3InsertNode(pDev,     "0",             &pInst);                       UPDATE_RC();
+    rc = CFGMR3InsertNode(pInst,    "Config",        &pCfg);                        UPDATE_RC();
+    rc = CFGMR3InsertInteger(pInst, "Trusted",       1);                            UPDATE_RC();
+    rc = CFGMR3InsertNode(pInst,    "LUN#0",         &pLunL0);                      UPDATE_RC();
+    rc = CFGMR3InsertString(pLunL0, "Driver",        "VUSBRootHub");                UPDATE_RC();
+    rc = CFGMR3InsertNode(pLunL0,   "Config",        &pCfg);                        UPDATE_RC();
+    
+    PCFGMNODE pUsbDevices = NULL;
+    rc = CFGMR3InsertNode(pRoot,     "USB", &pUsbDevices);                          UPDATE_RC();
+
+    rc = CFGMR3InsertNode(pUsbDevices, "HidMouse",       &pDev);                    UPDATE_RC();
+    rc = CFGMR3InsertNode(pDev,        "0",              &pInst);                   UPDATE_RC();
+    rc = CFGMR3InsertNode(pInst,       "Config",         &pCfg);                    UPDATE_RC();
+    rc = CFGMR3InsertInteger(pCfg,     "Absolute",       1);                        UPDATE_RC();
+    rc = CFGMR3InsertNode(pInst,       "LUN#0",          &pLunL0);                  UPDATE_RC();
+    rc = CFGMR3InsertString(pLunL0,    "Driver",         "MouseQueue");             UPDATE_RC();
+    rc = CFGMR3InsertNode(pLunL0,      "Config",         &pCfg);                    UPDATE_RC();
+    rc = CFGMR3InsertInteger(pCfg,     "QueueSize",      128);                      UPDATE_RC();
+    rc = CFGMR3InsertNode(pLunL0,      "AttachedDriver", &pLunL1);                  UPDATE_RC();
+    rc = CFGMR3InsertString(pLunL1,    "Driver",         "MainMouse");              UPDATE_RC();
+    rc = CFGMR3InsertNode(pLunL1,      "Config",         &pCfg);                    UPDATE_RC();
+    rc = CFGMR3InsertInteger(pCfg,     "Object",         (uintptr_t)gMouse);        UPDATE_RC();
+#endif
+
+    /*
      * AC'97 ICH audio
      */
     if (g_fAudio)

+++ src/app/virtualbox/src/VBox/Devices/USB/DevOHCI.cpp
@@ -3654,7 +3654,9 @@
 #else
     pOhci->SofTime = TMTimerGet(pOhci->CTX_SUFF(pEndOfFrameTimer));
 #endif
+    TMTimerLock(pOhci->CTX_SUFF(pEndOfFrameTimer), VINF_SUCCESS);
     TMTimerSet(pOhci->CTX_SUFF(pEndOfFrameTimer), pOhci->SofTime + pOhci->cTicksPerFrame);
+    TMTimerUnlock(pOhci->CTX_SUFF(pEndOfFrameTimer));
 
     /*
      * Check that the HCCA address isn't bogus. Linux 2.4.x is known to start
@@ -3776,7 +3778,9 @@
         if (uNewFrameRate == OHCI_DEFAULT_TIMER_FREQ)
         {
             /* If we're switching back to full speed, re-program the timer immediately to minimize latency. */
+            TMTimerLock(pOhci->CTX_SUFF(pEndOfFrameTimer), VINF_SUCCESS);
             TMTimerSet(pOhci->CTX_SUFF(pEndOfFrameTimer), pOhci->SofTime + pOhci->cTicksPerFrame);
+            TMTimerUnlock(pOhci->CTX_SUFF(pEndOfFrameTimer));
         }
     }
 }
@@ -3841,7 +3845,11 @@
 static void ohciBusStop(POHCI pOhci)
 {
     if (pOhci->CTX_SUFF(pEndOfFrameTimer))
+    {
+        TMTimerLock(pOhci->CTX_SUFF(pEndOfFrameTimer), VINF_SUCCESS);
         TMTimerStop(pOhci->CTX_SUFF(pEndOfFrameTimer));
+        TMTimerUnlock(pOhci->CTX_SUFF(pEndOfFrameTimer));
+    }
     VUSBIDevPowerOff(pOhci->RootHub.pIDev);
 }
 
@@ -5556,7 +5564,7 @@
     /*
      * Create the end-of-frame timer.
      */
-    rc = PDMDevHlpTMTimerCreate(pDevIns, TMCLOCK_VIRTUAL, ohciFrameBoundaryTimer, pOhci,
+    rc = PDMDevHlpTMTimerCreate(pDevIns, TMCLOCK_VIRTUAL_SYNC, ohciFrameBoundaryTimer, pOhci,
                                 TMTIMER_FLAGS_DEFAULT_CRIT_SECT, "USB Frame Timer",
                                 &pOhci->pEndOfFrameTimerR3);
     if (RT_FAILURE(rc))
